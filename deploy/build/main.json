{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.11.53198",
      "templateHash": "500994232017247346"
    }
  },
  "parameters": {
    "namePrefix": {
      "type": "string",
      "maxLength": 11,
      "minLength": 3
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    },
    "timeZone": {
      "type": "string"
    },
    "startTime": {
      "type": "string"
    },
    "endTime": {
      "type": "string"
    },
    "gameMode": {
      "type": "string"
    },
    "gameDifficulty": {
      "type": "string"
    },
    "gameAllowCheats": {
      "type": "string"
    }
  },
  "variables": {
    "resourceGroup": "[format('{0}-rg', parameters('namePrefix'))]",
    "aciName": "[format('{0}-aci', parameters('namePrefix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('resourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "storageDeploy",
      "resourceGroup": "[variables('resourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namePrefix": {
            "value": "[parameters('namePrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.11.53198",
              "templateHash": "1983801567136616136"
            }
          },
          "parameters": {
            "namePrefix": {
              "type": "string",
              "maxLength": 11,
              "minLength": 3
            },
            "storageSKU": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "uniqueStorageName": "[format('{0}{1}st01', parameters('namePrefix'), uniqueString(resourceGroup().id))]",
            "fileShareName": "[format('{0}-share', parameters('namePrefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[variables('uniqueStorageName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageSKU')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/default/{1}', variables('uniqueStorageName'), variables('fileShareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('uniqueStorageName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[variables('uniqueStorageName')]"
            },
            "storageAccountKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('uniqueStorageName')), '2021-04-01').keys[0].value]"
            },
            "fileShareName": {
              "type": "string",
              "value": "[variables('fileShareName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroup'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "automationAccountDeploy",
      "resourceGroup": "[variables('resourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namePrefix": {
            "value": "[parameters('namePrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "modules": {
            "value": [
              {
                "name": "Az.Accounts",
                "version": "latest",
                "uri": "https://www.powershellgallery.com/api/v2/package"
              },
              {
                "name": "Az.ContainerInstance",
                "version": "latest",
                "uri": "https://www.powershellgallery.com/api/v2/package"
              }
            ]
          },
          "runbooks": {
            "value": [
              {
                "runbookName": "Start-ACI",
                "runbookUri": "https://raw.githubusercontent.com/pascalvanderheiden/azure-minecraft-bedrock/main/deploy/build/start-aci.ps1",
                "runbookType": "PowerShell",
                "logProgress": true,
                "logVerbose": false
              },
              {
                "runbookName": "Stop-ACI",
                "runbookUri": "https://raw.githubusercontent.com/pascalvanderheiden/azure-minecraft-bedrock/main/deploy/build/stop-aci.ps1",
                "runbookType": "PowerShell",
                "logProgress": true,
                "logVerbose": false
              }
            ]
          },
          "schedules": {
            "value": [
              {
                "scheduleName": "start-aci-schedule",
                "startTime": "[parameters('startTime')]",
                "timeZone": "[parameters('timeZone')]"
              },
              {
                "scheduleName": "stop-aci-schedule",
                "startTime": "[parameters('endTime')]",
                "timeZone": "[parameters('timeZone')]"
              }
            ]
          },
          "jobschedules": {
            "value": [
              {
                "scheduleJobName": "start-aci-schedule",
                "runbookName": "Start-ACI",
                "scheduleName": "start-aci-schedule",
                "resourceGroup": "[variables('resourceGroup')]",
                "aciName": "[variables('aciName')]"
              },
              {
                "scheduleJobName": "stop-aci-schedule",
                "runbookName": "Stop-ACI",
                "scheduleName": "stop-aci-schedule",
                "resourceGroup": "[variables('resourceGroup')]",
                "aciName": "[variables('aciName')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.11.53198",
              "templateHash": "6398445522982930896"
            }
          },
          "parameters": {
            "namePrefix": {
              "type": "string",
              "maxLength": 11,
              "minLength": 3
            },
            "location": {
              "type": "string"
            },
            "modules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "name": "Module name",
                "version": "Module version or specify latest to get the latest version",
                "uri": "Module package uri, e.g. https://www.powershellgallery.com/api/v2/package",
                "description": "Modules to import into automation account"
              }
            },
            "runbooks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "runbookName": "Runbook name",
                "runbookUri": "Runbook URI",
                "runbookType": "Runbook type: Graph, Graph PowerShell, Graph PowerShellWorkflow, PowerShell, PowerShell Workflow, Script",
                "logProgress": "Enable progress logs",
                "logVerbose": "Enable verbose logs",
                "description": "Runbooks to import into automation account"
              }
            },
            "schedules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "scheduleName": "Schedule name",
                "startTime": "Start time",
                "timeZone": "Time zone",
                "description": "Schedules to import into automation account"
              }
            },
            "jobschedules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "scheduleJobName": "Job Schedule name",
                "runbookName": "Runbook name",
                "scheduleName": "Schedule name",
                "resourceGroup": "Resource group parameter",
                "aciName": "ACI name parameter",
                "description": "Job Schedules to import into automation account"
              }
            }
          },
          "variables": {
            "automationAccountName": "[format('{0}-aa', parameters('namePrefix'))]",
            "sku": "Free",
            "enableDeleteLock": false,
            "lockName": "[format('{0}-aa-lck', parameters('namePrefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2020-01-13-preview",
              "name": "[variables('automationAccountName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "sku": {
                  "name": "[variables('sku')]"
                }
              }
            },
            {
              "copy": {
                "name": "automationAccountModules",
                "count": "[length(parameters('modules'))]"
              },
              "type": "Microsoft.Automation/automationAccounts/modules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', variables('automationAccountName'), parameters('modules')[copyIndex()].name)]",
              "properties": {
                "contentLink": {
                  "uri": "[if(equals(parameters('modules')[copyIndex()].version, 'latest'), format('{0}/{1}', parameters('modules')[copyIndex()].uri, parameters('modules')[copyIndex()].name), format('{0}/{1}/{2}', parameters('modules')[copyIndex()].uri, parameters('modules')[copyIndex()].name, parameters('modules')[copyIndex()].version))]",
                  "version": "[if(equals(parameters('modules')[copyIndex()].version, 'latest'), null(), parameters('modules')[copyIndex()].version)]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "runbook",
                "count": "[length(parameters('runbooks'))]"
              },
              "type": "Microsoft.Automation/automationAccounts/runbooks",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', variables('automationAccountName'), parameters('runbooks')[copyIndex()].runbookName)]",
              "location": "[parameters('location')]",
              "properties": {
                "runbookType": "[parameters('runbooks')[copyIndex()].runbookType]",
                "logProgress": "[parameters('runbooks')[copyIndex()].logProgress]",
                "logVerbose": "[parameters('runbooks')[copyIndex()].logVerbose]",
                "publishContentLink": {
                  "uri": "[parameters('runbooks')[copyIndex()].runbookUri]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
              ]
            },
            {
              "condition": "[variables('enableDeleteLock')]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', variables('automationAccountName'))]",
              "name": "[variables('lockName')]",
              "properties": {
                "level": "CanNotDelete"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "schedule",
                "count": "[length(parameters('schedules'))]"
              },
              "type": "Microsoft.Automation/automationAccounts/schedules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', variables('automationAccountName'), parameters('schedules')[copyIndex()].scheduleName)]",
              "properties": {
                "frequency": "Day",
                "interval": "1",
                "startTime": "[parameters('schedules')[copyIndex()].startTime]",
                "timeZone": "[parameters('schedules')[copyIndex()].timeZone]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "jobSchedule",
                "count": "[length(parameters('jobschedules'))]"
              },
              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', variables('automationAccountName'), guid(format('{0}', parameters('jobschedules')[copyIndex()].scheduleJobName)))]",
              "properties": {
                "runbook": {
                  "name": "[parameters('jobschedules')[copyIndex()].runbookName]"
                },
                "schedule": {
                  "name": "[parameters('jobschedules')[copyIndex()].scheduleName]"
                },
                "parameters": {
                  "resourceGroup": "[parameters('jobschedules')[copyIndex()].resourceGroup]",
                  "aciName": "[parameters('jobschedules')[copyIndex()].aciName]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), '2020-01-13-preview', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroup'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "aciDeploy",
      "resourceGroup": "[variables('resourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namePrefix": {
            "value": "[parameters('namePrefix')]"
          },
          "aciName": {
            "value": "[variables('aciName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'storageDeploy')).outputs.storageAccountName.value]"
          },
          "storageAccountKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'storageDeploy')).outputs.storageAccountKey.value]"
          },
          "fileShareName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'storageDeploy')).outputs.fileShareName.value]"
          },
          "gameMode": {
            "value": "[parameters('gameMode')]"
          },
          "gameDifficulty": {
            "value": "[parameters('gameDifficulty')]"
          },
          "gameAllowCheats": {
            "value": "[parameters('gameAllowCheats')]"
          },
          "autoAccPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'automationAccountDeploy')).outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.11.53198",
              "templateHash": "6971873425329456713"
            }
          },
          "parameters": {
            "namePrefix": {
              "type": "string",
              "maxLength": 11,
              "minLength": 3
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountKey": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string"
            },
            "gameMode": {
              "type": "string"
            },
            "gameDifficulty": {
              "type": "string"
            },
            "gameAllowCheats": {
              "type": "string"
            },
            "autoAccPrincipalId": {
              "type": "string"
            },
            "aciName": {
              "type": "string"
            }
          },
          "variables": {
            "cpuCores": 1,
            "memoryInGb": 2,
            "restartPolicy": "Always",
            "image": "itzg/minecraft-bedrock-server",
            "port": 19132,
            "protocol": "UDP",
            "containerGroupName": "[parameters('aciName')]",
            "ContainerName": "[format('{0}-con', parameters('namePrefix'))]",
            "uniqueDnsName": "[format('{0}{1}', parameters('namePrefix'), uniqueString(resourceGroup().id))]",
            "builtInRoleType": "Contributor",
            "role": {
              "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
              "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
              "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2021-09-01",
              "name": "[variables('containerGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "containers": [
                  {
                    "name": "[variables('ContainerName')]",
                    "properties": {
                      "image": "[variables('image')]",
                      "ports": [
                        {
                          "port": "[variables('port')]",
                          "protocol": "[variables('protocol')]"
                        }
                      ],
                      "environmentVariables": [
                        {
                          "name": "EULA",
                          "value": "true"
                        },
                        {
                          "name": "GAMEMODE",
                          "value": "[parameters('gameMode')]"
                        },
                        {
                          "name": "DIFFICULTY",
                          "value": "[parameters('gameDifficulty')]"
                        },
                        {
                          "name": "ALLOW_CHEATS",
                          "value": "[parameters('gameAllowCheats')]"
                        }
                      ],
                      "resources": {
                        "requests": {
                          "cpu": "[variables('cpuCores')]",
                          "memoryInGB": "[variables('memoryInGb')]"
                        }
                      },
                      "volumeMounts": [
                        {
                          "name": "azurefile",
                          "mountPath": "/data"
                        }
                      ]
                    }
                  }
                ],
                "osType": "Linux",
                "restartPolicy": "[variables('restartPolicy')]",
                "ipAddress": {
                  "type": "Public",
                  "dnsNameLabel": "[variables('uniqueDnsName')]",
                  "ports": [
                    {
                      "port": "[variables('port')]",
                      "protocol": "[variables('protocol')]"
                    }
                  ]
                },
                "volumes": [
                  {
                    "name": "azurefile",
                    "azureFile": {
                      "shareName": "[parameters('fileShareName')]",
                      "storageAccountName": "[parameters('storageAccountName')]",
                      "storageAccountKey": "[parameters('storageAccountKey')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.ContainerInstance/containerGroups/{0}', variables('containerGroupName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerInstance/containerGroups', variables('containerGroupName')), parameters('autoAccPrincipalId'), variables('role')[variables('builtInRoleType')])]",
              "properties": {
                "roleDefinitionId": "[variables('role')[variables('builtInRoleType')]]",
                "principalId": "[parameters('autoAccPrincipalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerInstance/containerGroups', variables('containerGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "containerIPv4Address": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', variables('containerGroupName'))).ipAddress.ip]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'automationAccountDeploy')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroup')), 'Microsoft.Resources/deployments', 'storageDeploy')]"
      ]
    }
  ]
}